Short AnnDbMap API demo
=====================

  library(hgu95av2db)
  ls(2)
  x <- hgu95av2PATH
  x
  as.data.frame(x)[1:6, ]
  as.data.frame(x, "40781_at")

  as.list(x, "40781_at")   # equivalent to mget("40781_at", x)

Pick up some probeset ids:

  pbids <- keys(x)[1:4]   # keys() is the same as ls()
  as.data.frame(x, pbids)
  as.list(x, pbids)

Back to the data frame:

  as.data.frame(x)[1:6, ]
  as.data.frame(x, , "00230")

too long... With another KEGG id:
 
  as.data.frame(x, , "00300")

This doesn't work (only 2 args to as.list, x and keys):

  as.list(x, , "00300")
  as.list(x, "00300")

You must do this instead:

  as.list(revmap(x), "00300")

The reverse map:

  revmap(x)
  x

In the case of the PATH map, we don't need to use revmap(x)
because hgu95av2db already provides the PATH2PROBE map:

  ls(2)
  revx <- hgu95av2PATH2PROBE   # except for the name, this is exactly revmap(x)
  revx2 <- revmap(x, mapName="PATH2PROBE")
  revx2
  identical(revx, revx2)

  as.list(revx, "00300")

Note that the order of the cols returned by as.data.frame() does
not depend on the orientation of the map ("unoriented method"):

  as.data.frame(x)[1:6, ]
  as.data.frame(revx)[1:6, ]

  --> the left keys are always on the left (1st col), the right
      keys always in the 2nd col

There can be more than 2 columns in the returned data frame:

  3 cols:
    as.data.frame(hgu95av2PFAM)[1:6, ]  # the right values are tagged
    as.list(hgu95av2PFAM, "1000_at")

  4 cols:
    as.data.frame(hgu95av2GO)[1:6, ]    
    as.list(hgu95av2GO, "1000_at")

But the right keys are ALWAYS in the 2nd col.

For length() and keys(), the result does depend on the orientation
("oriented methods"):

  length(x)
  length(revx)
  keys(x)   # all probeset ids
  keys(revx)   # all KEGG ids mapped to a probeset id

There are "unoriented" methods related to these methods:

  left.keys(x)    # same for all maps in hgu95av2db (except pseudo-map
                   # MAPCOUNTS)
  left.length(x)   # nb of left keys
  right.keys(x)   # KEGG ids for PATH/PATH2PROBE maps, GO ids for
                   # GO/GO2PROBE/GO2ALLPROBES maps, etc...
  right.length(x)  # nb of right keys

  --> they give the same result for x and revmap(x)

This helps to understand the naming of the as.data.frame args:

  as.data.frame(x, left.keys, right.keys)

Using revmap can be very efficient in some use cases:

  x <- hgu95av2CHR
  right.keys(x)
  chroms <- right.keys(x)[24:25]
  chroms
  as.data.frame(x, , chroms)

To get this in the classic named-list format:

  as.list(revmap(x), chroms)

Compare to what you need to do this with the current envir-based package:

  library(hgu95av2)
  u <- unlist(as.list(hgu95av2CHR))
  u <- u[u %in% chroms]
  split(names(u), u)

A last example with cytogenetic locations:

  ls(2)
  x <- hgu95av2MAP
  as.data.frame(hgu95av2MAP)[1:6, ]
  as.list(revmap(x), "8p22")

Are the probes in 'pbids' mapped to cytogenetic location "6p21.3"?

  as.data.frame(x, pbids, "6p21.3")

To coerce this map to a named vector:

  pb2cyto <- as.character(x)
  pb2cyto[pbids]

The coercion of the reverse map works too but issues a warning because
of the duplicated names:

  cyto2pb <- as.character(revmap(x))
